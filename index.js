// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, csv, fs, iconv,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  iconv = require('iconv-lite');

  fs = require('fs');

  csv = (function(_super) {

    __extends(csv, _super);

    function csv(csvfile) {
      this.init(csvfile);
    }

    csv.prototype.init = function(csvfile) {
      this.csvfile = csvfile;
      return this;
    };

    csv.prototype.parse = function(options) {
      var CSVToArray, self;
      if (options == null) {
        options = {};
      }
      self = this;
      if (!self.csvfile) {
        self.emit('error', {
          msg: "please input the csvfile"
        });
      } else {
        CSVToArray = function(str, split) {
          var arrData, arrMatches, objPattern, strMatchedDelimiter, strMatchedValue;
          objPattern = new RegExp("(\\" + split + "|\\r?\\n|\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\"\\" + split + "\\r\\n]*))", "gi");
          arrData = [[]];
          arrMatches = null;
          while (arrMatches = objPattern.exec(str)) {
            strMatchedDelimiter = arrMatches[1];
            if (strMatchedDelimiter.length && strMatchedDelimiter !== split) {
              arrData.push([]);
            }
            if (arrMatches[2]) {
              strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
            } else {
              strMatchedValue = arrMatches[3];
            }
            arrData[arrData.length - 1].push(strMatchedValue);
          }
          return arrData[0];
        };
        fs.readFile(self.csvfile, function(err, buffer) {
          var data, jsonArr, rows, split;
          if (err) {
            return self.emit('error', {
              msg: "read file error:" + err
            });
          } else {
            if (options.decode) {
              data = iconv.decode(buffer, options.decode);
            } else {
              data = buffer.toString();
            }
            split = options.split || ',';
            rows = data.split('\n');
            jsonArr = [];
            rows.forEach(function(row) {
              var obj, rowData;
              rowData = CSVToArray(row, split);
              if (options.headers) {
                if (!self.headers) {
                  return self.headers = rowData;
                } else {
                  obj = {};
                  rowData.forEach(function(d, i) {
                    var header;
                    header = self.headers[i];
                    return obj[header] = d;
                  });
                  return jsonArr.push(obj);
                }
              } else {
                return jsonArr.push(rowData);
              }
            });
            return self.emit('end', jsonArr);
          }
        });
      }
      return self;
    };

    return csv;

  })(EventEmitter);

  module.exports = csv;

}).call(this);
